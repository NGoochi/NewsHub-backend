"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testGeminiConnection = exports.analyzeArticles = void 0;
const axios_1 = __importDefault(require("axios"));
/**
 * Analyze articles using Gemini API
 * @param articles Array of articles to analyze (max 10)
 * @returns Analysis results with summaries, categories, sentiment, and quotes
 */
const analyzeArticles = async (articles) => {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
        throw new Error('GEMINI_API_KEY environment variable is required');
    }
    if (articles.length > 10) {
        throw new Error('Maximum 10 articles can be analyzed per request');
    }
    if (articles.length === 0) {
        throw new Error('At least one article is required for analysis');
    }
    const systemPrompt = `You are a news analysis assistant. Analyze the provided articles and return structured JSON data.

For each article, provide:
1. A concise summary (2-3 sentences)
2. A category from: Politics, Business, Technology, Health, Sports, Entertainment, Science, World News
3. Sentiment: positive, neutral, or negative
4. Whether the content was translated (true/false)
5. Key quotes from stakeholders with their name, affiliation, and quote text

Return ONLY valid JSON in this exact format:
{
  "articles": [
    {
      "id": "article_id",
      "summary": "Article summary here",
      "category": "Category Name",
      "sentiment": "positive|neutral|negative",
      "translated": false,
      "quotes": [
        {
          "stakeholderName": "Person Name",
          "stakeholderAffiliation": "Organization/Role",
          "quote": "Quote text here"
        }
      ]
    }
  ]
}`;
    const userPrompt = `Please analyze these articles:

${articles.map(article => `
Article ID: ${article.id}
Title: ${article.title}
Source: ${article.newsOutlet || 'Unknown'}
Authors: ${article.authors?.join(', ') || 'Unknown'}
Content: ${article.fullBodyText}
`).join('\n---\n')}

Return the analysis in the specified JSON format.`;
    try {
        const response = await axios_1.default.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`, {
            contents: [
                {
                    parts: [
                        {
                            text: `${systemPrompt}\n\n${userPrompt}`
                        }
                    ]
                }
            ],
            generationConfig: {
                temperature: 0.1,
                topK: 40,
                topP: 0.95,
                maxOutputTokens: 8192,
            }
        }, {
            headers: {
                'Content-Type': 'application/json',
            },
            timeout: 30000 // 30 second timeout
        });
        const generatedText = response.data.candidates?.[0]?.content?.parts?.[0]?.text;
        if (!generatedText) {
            throw new Error('No content generated by Gemini');
        }
        // Parse the JSON response
        const analysisResult = JSON.parse(generatedText);
        // Validate the response structure
        if (!analysisResult.articles || !Array.isArray(analysisResult.articles)) {
            throw new Error('Invalid response format from Gemini');
        }
        return analysisResult;
    }
    catch (error) {
        if (axios_1.default.isAxiosError(error)) {
            throw new Error(`Gemini API request failed: ${error.response?.data?.error?.message || error.message}`);
        }
        if (error instanceof SyntaxError) {
            throw new Error(`Failed to parse Gemini response as JSON: ${error.message}`);
        }
        throw error;
    }
};
exports.analyzeArticles = analyzeArticles;
/**
 * Test Gemini API connection
 * @returns True if connection is successful
 */
const testGeminiConnection = async () => {
    try {
        await (0, exports.analyzeArticles)([{
                id: 'test',
                title: 'Test Article',
                fullBodyText: 'This is a test article for connection testing.',
                newsOutlet: 'Test Source'
            }]);
        return true;
    }
    catch (error) {
        return false;
    }
};
exports.testGeminiConnection = testGeminiConnection;
