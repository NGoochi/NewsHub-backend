generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InputMethod {
  newsapi
  manual
  csv
}

enum Sentiment {
  positive
  neutral
  negative
}

model Project {
  id              String    @id @default(uuid())
  name            String
  description     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  articles        Article[]
  importSessions  ImportSession[]
  analysisBatches AnalysisBatch[]
}

model Article {
  id               String     @id @default(uuid())
  projectId        String
  project          Project    @relation(fields: [projectId], references: [id])
  newsOutlet       String?
  title            String
  authors          String[]
  url              String?
  fullBodyText     String?
  dateWritten      DateTime?
  inputMethod      InputMethod @default(newsapi)
  summaryGemini    String?
  categoryGemini   String?
  sentimentGemini  Sentiment?
  translatedGemini Boolean     @default(false)
  analysedAt       DateTime?
  quotes           Quote[]
  
  // NewsAPI.ai specific fields
  sourceUri        String?     // NewsAPI.ai source identifier
  concepts         Json?       // Store AI-extracted concepts
  categories       Json?       // Store article categories  
  sentiment        Float?      // Sentiment score from NewsAPI.ai
  imageUrl         String?     // Article image URL
  location         Json?       // Geographic data
  importSessionId  String?     // Link to import session
  importSession    ImportSession? @relation(fields: [importSessionId], references: [id])
}

model Quote {
  id                          String   @id @default(uuid())
  articleId                   String
  article                     Article  @relation(fields: [articleId], references: [id])
  stakeholderNameGemini        String?
  stakeholderAffiliationGemini String?
  quoteGemini                  String?
}

model AnalysisJob {
  id          String    @id @default(uuid())
  articleId   String
  projectId   String
  status      String    @default("queued") // queued, processing, completed, failed
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  batchId     String?
}

model AnalysisBatch {
  id          String    @id @default(uuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  status      String    @default("pending") // pending, running, completed, failed, cancelled
  articleIds  String[]  // Array of article IDs being analyzed
  totalArticles Int     // Total number of articles in batch
  processedArticles Int @default(0) // Number of articles processed
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  results     Json?     // Store analysis results
}

model SearchSource {
  id          String   @id @default(uuid())
  title       String
  region      String
  country     String
  language    String
  sourceUri   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ImportSession {
  id              String   @id @default(uuid())
  projectId       String
  project         Project  @relation(fields: [projectId], references: [id])
  searchTerms     String[]
  sources         String[]
  startDate       DateTime
  endDate         DateTime
  articlesFound   Int
  articlesImported Int
  status          String   // 'running', 'completed', 'failed'
  createdAt       DateTime @default(now())
  completedAt     DateTime?
  articles        Article[]
}

model PromptTemplate {
  id          String   @id @default(uuid())
  type        String   // "article-analysis" | "quote-analysis"
  content     String   @db.Text
  version     Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // Future: user ID
  description String?  // Optional notes about this version
  
  @@index([type, isActive])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  definition  String   @db.Text
  keywords    String[] // Array of keyword strings
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0) // For custom ordering in UI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([isActive, sortOrder])
}
